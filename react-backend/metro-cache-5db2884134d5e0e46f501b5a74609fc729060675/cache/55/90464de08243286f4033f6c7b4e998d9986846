__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/root/Documents/Whatever/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var NativeMethodsMixin = require(_dependencyMap[0], "NativeMethodsMixin");

  var React = require(_dependencyMap[1], "React");

  var PropTypes = require(_dependencyMap[2], "prop-types");

  var StyleSheet = require(_dependencyMap[3], "StyleSheet");

  var ViewPropTypes = require(_dependencyMap[4], "ViewPropTypes");

  var createReactClass = require(_dependencyMap[5], "create-react-class");

  var requireNativeComponent = require(_dependencyMap[6], "requireNativeComponent");

  var SEGMENTED_CONTROL_REFERENCE = 'segmentedcontrol';
  var SegmentedControlIOS = createReactClass({
    displayName: 'SegmentedControlIOS',
    mixins: [NativeMethodsMixin],
    propTypes: _extends({}, ViewPropTypes, {
      values: PropTypes.arrayOf(PropTypes.string),
      selectedIndex: PropTypes.number,
      onValueChange: PropTypes.func,
      onChange: PropTypes.func,
      enabled: PropTypes.bool,
      tintColor: PropTypes.string,
      momentary: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        values: [],
        enabled: true
      };
    },
    _onChange: function _onChange(event) {
      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      return React.createElement(RCTSegmentedControl, _extends({}, this.props, {
        ref: SEGMENTED_CONTROL_REFERENCE,
        style: [styles.segmentedControl, this.props.style],
        onChange: this._onChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 112
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    segmentedControl: {
      height: 28
    }
  });
  var RCTSegmentedControl = requireNativeComponent('RCTSegmentedControl', SegmentedControlIOS);
  module.exports = SegmentedControlIOS;
});