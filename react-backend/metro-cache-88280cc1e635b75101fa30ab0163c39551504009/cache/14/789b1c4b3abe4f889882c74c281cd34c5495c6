__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/root/Documents/swarajd-hackuva/react-frontend/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.ios.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var NativeMethodsMixin = require(_dependencyMap[0], 'NativeMethodsMixin');

  var React = require(_dependencyMap[1], 'React');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var StyleSheet = require(_dependencyMap[3], 'StyleSheet');

  var View = require(_dependencyMap[4], 'View');

  var ViewPropTypes = require(_dependencyMap[5], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[6], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[7], 'requireNativeComponent');

  var DatePickerIOS = createReactClass({
    displayName: 'DatePickerIOS',
    _picker: undefined,
    mixins: [NativeMethodsMixin],
    propTypes: _extends({}, ViewPropTypes, {
      date: PropTypes.instanceOf(Date).isRequired,
      onDateChange: PropTypes.func.isRequired,
      maximumDate: PropTypes.instanceOf(Date),
      minimumDate: PropTypes.instanceOf(Date),
      mode: PropTypes.oneOf(['date', 'time', 'datetime']),
      locale: PropTypes.string,
      minuteInterval: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30]),
      timeZoneOffsetInMinutes: PropTypes.number
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        mode: 'datetime'
      };
    },
    _onChange: function _onChange(event) {
      var nativeTimeStamp = event.nativeEvent.timestamp;
      this.props.onDateChange && this.props.onDateChange(new Date(nativeTimeStamp));
      this.props.onChange && this.props.onChange(event);
      var propsTimeStamp = this.props.date.getTime();

      if (this._picker && nativeTimeStamp !== propsTimeStamp) {
        this._picker.setNativeProps({
          date: propsTimeStamp
        });
      }
    },
    render: function render() {
      var _this = this;

      var props = this.props;
      return React.createElement(
        View,
        {
          style: props.style,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 130
          }
        },
        React.createElement(RCTDatePickerIOS, {
          ref: function ref(picker) {
            _this._picker = picker;
          },
          style: styles.datePickerIOS,
          date: props.date.getTime(),
          locale: props.locale ? props.locale : undefined,
          maximumDate: props.maximumDate ? props.maximumDate.getTime() : undefined,
          minimumDate: props.minimumDate ? props.minimumDate.getTime() : undefined,
          mode: props.mode,
          minuteInterval: props.minuteInterval,
          timeZoneOffsetInMinutes: props.timeZoneOffsetInMinutes,
          onChange: this._onChange,
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            return true;
          },
          onResponderTerminationRequest: function onResponderTerminationRequest() {
            return false;
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 131
          }
        })
      );
    }
  });
  var styles = StyleSheet.create({
    datePickerIOS: {
      height: 216
    }
  });
  var RCTDatePickerIOS = requireNativeComponent('RCTDatePicker', {
    propTypes: _extends({}, DatePickerIOS.propTypes, {
      date: PropTypes.number,
      locale: PropTypes.string,
      minimumDate: PropTypes.number,
      maximumDate: PropTypes.number,
      onDateChange: function onDateChange() {
        return null;
      },
      onChange: PropTypes.func
    })
  });
  module.exports = DatePickerIOS;
});